-- START TRANSACTION; // not needed in JDBC. Instead, use AUTOCOMMIT=OFF

DROP TABLE IF EXISTS USERS CASCADE;

DROP TABLE IF EXISTS USER_ CASCADE;
DROP TABLE IF EXISTS ARTIST CASCADE;
DROP TABLE IF EXISTS ALBUM CASCADE;
DROP TABLE IF EXISTS TRACK CASCADE;
DROP TABLE IF EXISTS PLAYLIST CASCADE;
DROP TABLE IF EXISTS QUEUE CASCADE;
DROP TABLE IF EXISTS CHAIN_ CASCADE;
DROP TABLE IF EXISTS GENRE CASCADE;
DROP TABLE IF EXISTS MONTHLY_LISTENS CASCADE;
DROP TABLE IF EXISTS POST CASCADE;
DROP TABLE IF EXISTS MEDIA CASCADE;

-- associative entities:

DROP TABLE IF EXISTS EMBED CASCADE;
DROP TABLE IF EXISTS LIKE_POST CASCADE;
DROP TABLE IF EXISTS FRIEND CASCADE;
DROP TABLE IF EXISTS FOLLOW_ARTIST CASCADE;
DROP TABLE IF EXISTS FOLLOW_PLAYLIST CASCADE;
DROP TABLE IF EXISTS COLLABORATE_PLAYLIST CASCADE;
DROP TABLE IF EXISTS LIKE_TRACK CASCADE;
DROP TABLE IF EXISTS TRACK_LISTEN CASCADE;
DROP TABLE IF EXISTS LIKE_ALBUM CASCADE;
DROP TABLE IF EXISTS COLLABORATE_ALBUM CASCADE;
DROP TABLE IF EXISTS ALBUM_GENRE CASCADE;
DROP TABLE IF EXISTS QUEUE_TRACK CASCADE;
DROP TABLE IF EXISTS PLAYLIST_TRACK CASCADE;
DROP TABLE IF EXISTS TRACK_GENRE CASCADE;
DROP TABLE IF EXISTS CHAIN_TRACK CASCADE;
DROP TABLE IF EXISTS MEMBER CASCADE;

CREATE TABLE USER_ (
    usr_id IDENTITY PRIMARY KEY,
    usr_name VARCHAR(255) NOT NULL,
    usr_pass VARCHAR(255) NOT NULL, -- previously CHARACTER(60)
    usr_email VARCHAR(255),
    usr_phone VARCHAR(22),
    usr_friends INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE ARTIST (
    art_id IDENTITY PRIMARY KEY,
    art_name CHARACTER VARYING(255) NOT NULL,
    art_bio CHARACTER VARYING(2000),
    art_flwrs INTEGER DEFAULT 0 NOT NULL,
    art_mbrs INTEGER DEFAULT 0 NOT NULL
);

CREATE TABLE ALBUM (
    alb_id IDENTITY PRIMARY KEY,
    alb_type ENUM('Single', 'EP', 'LP') NOT NULL,
    alb_name CHARACTER VARYING(255) NOT NULL,
    alb_cvr VARCHAR(255), -- file path to image file
    alb_trks INTEGER DEFAULT 0 NOT NULL,
    alb_likes INTEGER DEFAULT 0 NOT NULL,
    alb_priv BOOLEAN DEFAULT FALSE NOT NULL,
    art_id BIGINT REFERENCES ARTIST(art_id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE TRACK (
    trk_id IDENTITY PRIMARY KEY,
    trk_name CHARACTER VARYING(255) NOT NULL,
    trk_file VARCHAR(255), -- filepath to audio file, can be null to provide support for YouTube scraping
    trk_pos INTEGER DEFAULT 0 NOT NULL,
    trk_lyrics CHARACTER VARYING(2000),
    trk_len TIME DEFAULT '00:00:00',
    trk_strms INTEGER DEFAULT 0 NOT NULL,
    trk_likes INTEGER DEFAULT 0 NOT NULL,
    alb_id BIGINT REFERENCES ALBUM(alb_id) ON DELETE CASCADE NOT NULL
);

CREATE INDEX ON TRACK(trk_name); -- track name is anticipated to be one of the most frequently queried attributes

CREATE TABLE PLAYLIST (
    ply_id IDENTITY PRIMARY KEY,
    ply_name CHARACTER VARYING(255) NOT NULL,
    ply_desc CHARACTER VARYING(1000),
    ply_cvr VARCHAR(255), -- file path to image file
    ply_flwrs INTEGER DEFAULT 0 NOT NULL,
    ply_priv BOOLEAN DEFAULT FALSE NOT NULL,
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE CHAIN_ (
    chn_id IDENTITY PRIMARY KEY,
    ply_id BIGINT REFERENCES PLAYLIST(ply_id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE GENRE (
    gen_id IDENTITY PRIMARY KEY,
    gen_name VARCHAR(255)
);

CREATE TABLE POST (
    pst_id IDENTITY PRIMARY KEY,
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE NOT NULL,
    pst_text VARCHAR(255), -- should only be able to be null if no associated media
    pst_likes INTEGER DEFAULT 0 NOT NULL, -- derived attribute, number of likes
    pst_repls INTEGER DEFAULT 0 NOT NULL, -- derived attribute, number of replies
    repl_pst_id BIGINT REFERENCES POST(pst_id) ON DELETE CASCADE -- can be null
);

CREATE TABLE MEDIA (
    med_id IDENTITY PRIMARY KEY,
    pst_id BIGINT REFERENCES POST (pst_id) ON DELETE CASCADE NOT NULL,
    med_file VARCHAR(255) NOT NULL
);

-- associative entities:

CREATE TABLE EMBED (
    pst_id BIGINT REFERENCES POST(pst_id) ON DELETE CASCADE NOT NULL,
    emb_type VARCHAR(50) CHECK (emb_type in ('ARTIST', 'ALBUM', 'TRACK', 'PLAYLIST')),
    emb_id BIGINT,
    UNIQUE (pst_id)
);

CREATE TABLE LIKE_POST (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE NOT NULL,
    pst_id BIGINT REFERENCES POST(pst_id) ON DELETE CASCADE NOT NULL
);

CREATE TABLE FRIEND (
    usr_id1 BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    usr_id2 BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id1, usr_id2)
);

CREATE TABLE FOLLOW_ARTIST (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    art_id BIGINT REFERENCES ARTIST(art_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id, art_id)
);

CREATE TABLE FOLLOW_PLAYLIST (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    ply_id BIGINT REFERENCES PLAYLIST(ply_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id, ply_id)
);

CREATE TABLE COLLABORATE_PLAYLIST (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    ply_id BIGINT REFERENCES PLAYLIST(ply_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id, ply_id)
);

CREATE TABLE LIKE_TRACK (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id, trk_id)
);

CREATE TABLE TRACK_LISTEN (
     trk_lst_id IDENTITY PRIMARY KEY, -- added so users can listen multiple times in one day
     usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
     trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
     trk_lst_date DATE DEFAULT CURRENT_DATE
);

CREATE TABLE LIKE_ALBUM (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    alb_id BIGINT REFERENCES ALBUM(alb_id) ON DELETE CASCADE,
    PRIMARY KEY (usr_id, alb_id)
);

CREATE TABLE COLLABORATE_ALBUM (
    art_id BIGINT REFERENCES ARTIST(art_id) ON DELETE CASCADE,
    alb_id BIGINT REFERENCES ALBUM(alb_id) ON DELETE CASCADE,
    PRIMARY KEY (art_id, alb_id)
);

CREATE TABLE ALBUM_GENRE (
    alb_id BIGINT REFERENCES ALBUM(alb_id) ON DELETE CASCADE,
    gen_id BIGINT REFERENCES GENRE(gen_id) ON DELETE CASCADE,
    PRIMARY KEY (alb_id, gen_id)
);

CREATE TABLE QUEUE_TRACK (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
    que_trk_pos INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (usr_id, trk_id)
);

CREATE TABLE PLAYLIST_TRACK (
    ply_id BIGINT REFERENCES PLAYLIST(ply_id) ON DELETE CASCADE,
    trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
    ply_trk_pos INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (ply_id, trk_id)
);

CREATE TABLE TRACK_GENRE (
    trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
    gen_id BIGINT REFERENCES GENRE(gen_id) ON DELETE CASCADE,
    PRIMARY KEY (trk_id, gen_id)
);

CREATE TABLE CHAIN_TRACK (
    chn_id BIGINT REFERENCES CHAIN_(chn_id) ON DELETE CASCADE,
    trk_id BIGINT REFERENCES TRACK(trk_id) ON DELETE CASCADE,
    chn_trk_pos INTEGER DEFAULT 0 NOT NULL,
    PRIMARY KEY (chn_id, trk_id)
);

CREATE TABLE MEMBER (
    usr_id BIGINT REFERENCES USER_(usr_id) ON DELETE CASCADE,
    art_id BIGINT REFERENCES ARTIST(art_id) ON DELETE CASCADE,
    mbr_prim BOOLEAN DEFAULT FALSE NOT NULL,
    PRIMARY KEY (usr_id, art_id)
);

-- I previously had DELETE_USER_UPDATE_USER and DELETE_USER_UPDATE_ARTIST triggers,
-- but I discovered that these are unnecessary because deleting a user automatically
-- deletes the FRIEND and MEMBER associative entities via CASCADE, which activates
-- the necessary trigger automatically

CREATE TRIGGER INSERT_FRIEND_UPDATE_USER
    AFTER INSERT
    ON FRIEND
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertFriendUpdateUserTrigger";
CREATE TRIGGER DELETE_FRIEND_UPDATE_USER
    BEFORE DELETE
    ON FRIEND
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteFriendUpdateUserTrigger";

CREATE TRIGGER INSERT_MEMBER_UPDATE_ARTIST
    AFTER INSERT
    ON MEMBER
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertMemberUpdateArtistTrigger";
CREATE TRIGGER DELETE_MEMBER_UPDATE_ARTIST
    AFTER DELETE
    ON MEMBER
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteMemberUpdateArtistTrigger";

CREATE TRIGGER INSERT_FOLLOW_ARTIST_UPDATE_ARTIST
    AFTER INSERT
    ON FOLLOW_ARTIST
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertFollowArtistUpdateArtistTrigger";
CREATE TRIGGER DELETE_FOLLOW_ARTIST_UPDATE_ARTIST
    AFTER DELETE
    ON FOLLOW_ARTIST
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteFollowArtistUpdateArtistTrigger";

CREATE TRIGGER INSERT_TRACK_UPDATE_POS
    AFTER INSERT
    ON TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertTrackUpdatePosTrigger";
CREATE TRIGGER DELETE_TRACK_UPDATE_POS
    AFTER DELETE
    ON TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteTrackUpdatePosTrigger";

CREATE TRIGGER INSERT_QUEUE_TRACK_UPDATE_POS
    AFTER INSERT
    ON QUEUE_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertQueueTrackUpdatePosTrigger";
CREATE TRIGGER DELETE_QUEUE_TRACK_UPDATE_POS
    AFTER DELETE
    ON QUEUE_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteQueueTrackUpdatePosTrigger";

CREATE TRIGGER INSERT_PLAYLIST_TRACK_UPDATE_POS
    AFTER INSERT
    ON PLAYLIST_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertPlaylistTrackUpdatePosTrigger";
CREATE TRIGGER DELETE_PLAYLIST_TRACK_UPDATE_POS
    AFTER DELETE
    ON PLAYLIST_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.DeletePlaylistTrackUpdatePosTrigger";

CREATE TRIGGER INSERT_CHAIN_TRACK_UPDATE_POS
    AFTER INSERT
    ON CHAIN_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.InsertChainTrackUpdatePosTrigger";
CREATE TRIGGER DELETE_CHAIN_TRACK_UPDATE_POS
    AFTER DELETE
    ON CHAIN_TRACK
    FOR EACH ROW CALL "com.BayWave.Triggers.DeleteChainTrackUpdatePosTrigger";


COMMIT;